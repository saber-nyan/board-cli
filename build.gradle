/******************************************************************************
 * Copyright Â© 2017 saber-nyan                                                *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License");            *
 * you may not use this file except in compliance with the License.           *
 * You may obtain a copy of the License at                                    *
 *                                                                            *
 *     http://www.apache.org/licenses/LICENSE-2.0                             *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 ******************************************************************************/

group 'board-cli'
version '0.0.1a'

apply plugin: 'java'
apply plugin: 'nebula-aggregate-javadocs'
apply plugin: "com.dorongold.task-tree"

sourceCompatibility = 1.8

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
}

jar {
    dependsOn(':core:jar')
    dependsOn(':module-harkach:jar')
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        testCompile 'junit:junit:4.12'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    jar.dependsOn test
}

//noinspection GroovyAssignabilityCheck
task jacoco(type: JacocoReport) {
    dependsOn = subprojects.test
    //noinspection GroovyAssignabilityCheck
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    //noinspection GroovyAssignabilityCheck
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    //noinspection GroovyAssignabilityCheck
    classDirectories = files(subprojects.sourceSets.main.output)
    //noinspection GroovyAssignabilityCheck
    executionData = files(subprojects.jacocoTestReport.executionData)
    //noinspection GrUnresolvedAccess
    reports {
        //noinspection GrUnresolvedAccess
        html.enabled = true
        //noinspection GrUnresolvedAccess
        xml.enabled = true
        //noinspection GrUnresolvedAccess
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        //noinspection GrUnresolvedAccess
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    //noinspection GrUnresolvedAccess
    doFirst {
        //noinspection GrUnresolvedAccess
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

check.dependsOn this.tasks.jacoco
jar.dependsOn check
